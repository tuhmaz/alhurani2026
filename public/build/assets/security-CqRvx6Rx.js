const c={init(){this.initEventHandlers(),this.initTooltips(),this.initCharts()},initEventHandlers(){document.querySelectorAll('[data-action="block-ip"]').forEach(t=>{t.addEventListener("click",this.handleBlockIp.bind(this))}),document.querySelectorAll('[data-action="resolve-log"]').forEach(t=>{t.addEventListener("click",this.handleResolveLog.bind(this))});const r=document.querySelector("#security-filters");r&&r.addEventListener("submit",this.handleFilter.bind(this))},initTooltips(){[].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map(function(t){return new bootstrap.Tooltip(t)})},async handleBlockIp(r){const t=r.currentTarget,a=t.dataset.ip;try{const e=await fetch("/dashboard/security/blocked-ips",{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":document.querySelector('meta[name="csrf-token"]').content},body:JSON.stringify({ip_address:a,reason:"Blocked from security dashboard"})}),s=await e.json();if(e.ok)Swal.fire({icon:"success",title:"Success",text:s.message,showConfirmButton:!1,timer:1500}),t.closest("tr").classList.add("table-danger"),t.disabled=!0;else throw new Error(s.message||"Failed to block IP")}catch(e){console.error("Error blocking IP:",e),Swal.fire({icon:"error",title:"Error",text:e.message})}},async handleResolveLog(r){const t=r.currentTarget,a=t.dataset.logId;try{const{value:e}=await Swal.fire({title:"Resolution Notes",input:"textarea",inputLabel:"Please enter resolution notes",inputPlaceholder:"Type your notes here...",showCancelButton:!0,inputValidator:s=>{if(!s)return"You need to write something!"}});if(e){const s=await fetch(`/dashboard/security/logs/${a}/resolve`,{method:"POST",headers:{"Content-Type":"application/json","X-CSRF-TOKEN":document.querySelector('meta[name="csrf-token"]').content},body:JSON.stringify({notes:e})}),o=await s.json();if(s.ok){Swal.fire({icon:"success",title:"Success",text:o.message,showConfirmButton:!1,timer:1500});const n=t.closest("tr");n.querySelector(".status-badge").textContent="Resolved",n.querySelector(".status-badge").className="badge bg-success",t.disabled=!0}else throw new Error(o.message||"Failed to resolve log")}}catch(e){console.error("Error resolving log:",e),Swal.fire({icon:"error",title:"Error",text:e.message})}},handleFilter(r){r.preventDefault();const t=r.currentTarget,a=new URL(window.location.href),e=new FormData(t);for(const[s,o]of e.entries())o?a.searchParams.set(s,o):a.searchParams.delete(s);window.location.href=a.toString()},initCharts(){if(!document.querySelector("#securityEventsChart"))return;const r=document.querySelector("#securityEventsChart"),t={series:[{name:"Events",data:JSON.parse(r.dataset.events)}],chart:{height:350,type:"area",toolbar:{show:!1}},dataLabels:{enabled:!1},stroke:{curve:"smooth"},xaxis:{type:"datetime",categories:JSON.parse(r.dataset.dates)},tooltip:{x:{format:"dd MMM yyyy"}}};new ApexCharts(r,t).render();const e=document.querySelector("#eventDistributionChart");if(e){const n={series:JSON.parse(e.dataset.events||"[]"),chart:{type:"donut",height:350},labels:JSON.parse(e.dataset.labels||"[]"),legend:{position:"bottom"},dataLabels:{enabled:!0}};new ApexCharts(e,n).render()}const s=document.querySelector("#responseTimeChart");if(s){const n={series:[{name:"Avg Resolution (min)",data:JSON.parse(s.dataset.times||"[]")}],chart:{height:350,type:"line",toolbar:{show:!1}},stroke:{curve:"smooth",width:3},xaxis:{type:"datetime",categories:JSON.parse(s.dataset.dates||"[]")},yaxis:{labels:{formatter:l=>Math.round(l)}},tooltip:{x:{format:"dd MMM yyyy"}}};new ApexCharts(s,n).render()}const o=document.querySelector("#severityDistributionChart");if(o){const n={series:JSON.parse(o.dataset.values),chart:{type:"donut",height:350},labels:JSON.parse(o.dataset.labels),colors:["#435ebe","#fb7171","#ff9f43","#00cfe8"],responsive:[{breakpoint:480,options:{chart:{width:200},legend:{position:"bottom"}}}]};new ApexCharts(o,n).render()}}};document.addEventListener("DOMContentLoaded",()=>{c.init()});
